---
description:
globs:
alwaysApply: false
---
# GUI开发指南

## 架构概述

图形界面基于PyQt5实现，采用面板（Panel）的组织方式。主程序[gui/main.py](mdc:gui/main.py)创建主窗口并加载各功能面板。

## 面板基类

所有功能面板继承自[gui/panels/base_panel.py](mdc:gui/panels/base_panel.py)中的BasePanel类，该类提供：

- 统一的布局结构
- 扫描线程管理
- 结果处理和显示
- 导出功能

## 面板结构

标准的面板应包含以下区域：

1. **参数配置区**：输入框、下拉列表等控件
2. **控制按钮区**：开始/停止扫描按钮
3. **结果显示区**：表格或文本区域
4. **状态显示区**：进度条、状态标签

## 示例面板

以下是主机扫描面板[gui/panels/host_scan_panel.py](mdc:gui/panels/host_scan_panel.py)的结构示例：

```python
class HostScanPanel(BasePanel):
    """主机扫描面板"""
    
    def init_ui(self):
        """初始化UI组件"""
        # 创建布局
        layout = QVBoxLayout(self)
        
        # 参数表单
        form_group = QGroupBox("扫描参数")
        form_layout = QFormLayout(form_group)
        
        # IP范围输入
        self.ip_range_input = QLineEdit()
        self.ip_range_input.setText(self.config.get("host_scan", "default_range"))
        form_layout.addRow("IP范围:", self.ip_range_input)
        
        # 添加其他参数输入...
        
        # 控制按钮
        self.button_layout = QHBoxLayout()
        self.start_button = QPushButton("开始扫描")
        self.start_button.clicked.connect(self.start_scan)
        self.button_layout.addWidget(self.start_button)
        
        # 结果表格
        self.result_table = QTableWidget()
        self.setup_table(self.result_table)
        
        # 添加到主布局
        layout.addWidget(form_group)
        layout.addLayout(self.button_layout)
        layout.addWidget(self.result_table)
```

## 扫描线程

使用[gui/panels/base_panel.py](mdc:gui/panels/base_panel.py)中的ScanThread执行异步扫描操作：

```python
def start_scan(self):
    """开始扫描"""
    # 收集参数
    params = {
        'ip_range': self.ip_range_input.text(),
        # ...其他参数
    }
    
    # 创建扫描线程
    self.scan_thread = ScanThread("hostscan", params)
    self.scan_thread.update_signal.connect(self.on_scan_update)
    self.scan_thread.finished_signal.connect(self.on_scan_finished)
    
    # 启动线程
    self.scan_thread.start()
    self.set_running_state(True)
```

## 结果处理

扫描完成后，在回调函数中处理结果：

```python
def on_scan_finished(self, result):
    """扫描完成回调"""
    if result.success:
        self.display_results(result.data)
    else:
        self.show_error(result.error_msg)
    
    self.set_running_state(False)
```

## 注册面板

在[gui/main.py](mdc:gui/main.py)的load_modules方法中注册新面板：

```python
# 添加新模块面板
my_panel = MyPanel()
self.tab_widget.addTab(my_panel, "我的模块")
```
