---
description:
globs:
alwaysApply: false
---
# 命令行界面开发指南

## 架构概述

命令行界面基于argparse实现，入口文件为[cli/main.py](mdc:cli/main.py)。CLI支持以下功能：

- 列出所有扫描模块
- 执行特定扫描任务
- 管理配置项
- 导出扫描结果

## 命令结构

主程序定义了几个主要子命令：

1. **list**：列出所有可用模块
2. **scan**：执行扫描操作
3. **config**：配置管理

```
python cli/main.py list
python cli/main.py scan --module=hostscan --params='{"ip_range":"192.168.1.0/24"}'
python cli/main.py config show --section=host_scan
```

## 参数解析

在[cli/main.py](mdc:cli/main.py)中通过create_parser函数定义命令行参数结构：

```python
def create_parser() -> argparse.ArgumentParser:
    """创建命令行参数解析器"""
    parser = argparse.ArgumentParser(
        description="网络安全扫描工具箱 - 命令行版"
    )
    
    # 全局参数
    parser.add_argument('-v', '--verbose', action='store_true', help='启用详细输出')
    
    # 子命令
    subparsers = parser.add_subparsers(dest='command', help='命令')
    
    # list 命令
    list_parser = subparsers.add_parser('list', help='列出所有可用模块')
    
    # scan 命令
    scan_parser = subparsers.add_parser('scan', help='执行扫描')
    scan_parser.add_argument('-m', '--module', required=True, help='扫描模块名称')
    scan_parser.add_argument('-p', '--params', help='扫描参数 (JSON 格式)')
    
    # ... 其他参数定义
    
    return parser
```

## 扫描执行

扫描执行通过run_scan函数实现：

```python
def run_scan(args) -> None:
    """执行扫描"""
    # 加载扫描模块
    scanner_manager.discover_scanners()
    
    # 获取扫描器
    module_id = args.module.lower()
    scanner_class = scanner_manager.get_scanner(module_id)
    
    # 加载参数
    params = load_params(args)
    
    # 创建扫描器实例
    scanner = scanner_class(params)
    
    # 执行扫描
    result = scanner.execute()
    
    # 处理结果
    if result.success:
        # 处理成功情况...
    else:
        # 处理失败情况...
```

## 添加新命令

要添加新的命令功能，请按以下步骤操作：

1. 在create_parser函数中添加新的子命令定义
2. 创建对应的处理函数（如handle_new_command）
3. 在main函数中添加命令路由

```python
# 在create_parser中添加
new_cmd_parser = subparsers.add_parser('new_command', help='新命令说明')
new_cmd_parser.add_argument('--arg1', help='参数1说明')

# 创建处理函数
def handle_new_command(args) -> None:
    """处理新命令"""
    # 实现逻辑...

# 在main函数中添加
elif args.command == 'new_command':
    handle_new_command(args)
```

## 扫描模块参数

每个扫描模块需要在命令行中可以接收JSON格式的参数，参数名称应与模块配置一致：

```
# 主机扫描示例
python cli/main.py scan --module=hostscan --params='{"ip_range":"192.168.1.0/24", "timeout":2}'

# 端口扫描示例
python cli/main.py scan --module=portscan --params='{"target":"192.168.1.1", "ports":"1-1000"}'
```
