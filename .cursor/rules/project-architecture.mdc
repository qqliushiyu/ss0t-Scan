---
description:
globs:
alwaysApply: false
---
# 项目架构

## 核心框架

网络工具箱采用模块化设计，核心组件包括：

1. **基础扫描器** - [core/base_scanner.py](mdc:core/base_scanner.py) 定义了所有扫描模块的基础接口，包含：
   - 配置验证
   - 扫描执行
   - 结果处理
   - 生命周期管理

2. **扫描管理器** - [core/scanner_manager.py](mdc:core/scanner_manager.py) 负责：
   - 自动发现并注册扫描模块
   - 创建扫描器实例
   - 管理扫描模块元数据

3. **配置管理** - [utils/config.py](mdc:utils/config.py) 提供：
   - 全局和模块级配置管理
   - 默认配置加载
   - 配置保存和导入

4. **结果导出** - [utils/export.py](mdc:utils/export.py) 支持多种格式导出：
   - CSV格式
   - JSON格式
   - Excel格式

## 用户界面

项目提供两种操作界面：

1. **图形界面** - [gui/main.py](mdc:gui/main.py) 基于PyQt5实现：
   - 标签页式模块管理
   - 每个模块对应独立面板
   - 配置导入/导出
   - 实时进度显示

2. **命令行界面** - [cli/main.py](mdc:cli/main.py) 基于argparse实现：
   - 模块列表查询
   - 扫描参数传递
   - 配置管理
   - 结果导出

## 扫描模块

每个扫描模块都实现特定的网络检测功能：

- **主机扫描** - [core/host_scan.py](mdc:core/host_scan.py) - 发现活跃主机
- **端口扫描** - [core/port_scan.py](mdc:core/port_scan.py) - 检测开放端口及服务
- **DNS检测** - [core/dns_check.py](mdc:core/dns_check.py) - 域名解析与记录查询
- **路由追踪** - [core/traceroute.py](mdc:core/traceroute.py) - 网络路径分析
- **Ping监控** - [core/ping_monitor.py](mdc:core/ping_monitor.py) - 实时监控主机状态
- **TCP Ping** - [core/tcp_ping.py](mdc:core/tcp_ping.py) - TCP端口连通性测试

## 插件扩展

系统支持通过[plugins/](mdc:plugins/)目录添加自定义扫描模块，只需继承BaseScanner类并实现必要方法。
